"""
Django settings for driver project.

Generated by 'django-admin startproject' using Django 1.8.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import yaml

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

try:
    with open('/etc/secrets.yaml', 'r') as f:
        secrets = yaml.safe_load(f)
except (IOError, NameError):
    # Only use yaml serializable objects here, like string, int, list.
    # If you need another type, such as tuple, write like so:
    # secrets['somesetting'] = tuple(['a', 'b', 'c'])
    secrets = {
        'development': True,
        'driver_db_host': 'localhost',
        'driver_db_port': 5432,
        'driver_db_user': 'driver',
        'driver_db_password': 'driver',
        'driver_database': 'driver',
        'driver_static_dir': '/var/www/static',
        'driver_media_dir': '/var/www/media',
    }

DEVELOP = True if secrets['development'] else False
PRODUCTION = not DEVELOP

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '3xm=1k1a)1!l$)h#qlfp0ms$i6*nai$e2dz!0tt*iphoto3vmh'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = DEVELOP

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.gis',
    'corsheaders',
    'rest_framework',
    'oauth2_provider',

    'django_extensions',

    'ashlar'
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
)

ROOT_URLCONF = 'ashlar.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'driver.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'NAME': secrets['driver_database'],
        'HOST': secrets['driver_db_host'],
        'PORT': secrets['driver_db_port'],
        'USER': secrets['driver_db_user'],
        'PASSWORD': secrets['driver_db_password'],
        'CONN_MAX_AGE': 3600,  # in seconds
        'OPTIONS': {
            'sslmode': 'require'
        }
    }
}


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = secrets['driver_static_dir']

# Media files (uploaded via API)
# https://docs.djangoproject.com/en/1.8/topics/files/

MEDIA_ROOT = secrets['driver_media_dir']
MEDIA_URL = '/media/'

# Django OAuth Toolkit
# https://github.com/evonove/django-oauth-toolkit

OAUTH2_PROVIDER = {
    # Some default sensible scopes, could change later if more fine-grained scopes are necessary
    'SCOPES': {'read': 'Read scope', 'write': 'Write scope', 'groups': 'Access to your groups'}
}

# Django Rest Framework
# http://www.django-rest-framework.org/

# TODO: Switch to CORS_ORIGIN_REGEX_WHITELIST when we have a domain in place
CORS_ORIGIN_ALLOW_ALL = True

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'oauth2_provider.ext.rest_framework.OAuth2Authentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_FILTER_BACKENDS': ('rest_framework.filters.DjangoFilterBackend',),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 10,
}

ASHLAR = {
    # It is suggested to change this if you know that your data will be limited to
    # a certain part of the world, for example to a UTM Grid projection or a state
    # plane.
    'SRID': 3857,
}

## Tweak settings depending on deployment target
if DEVELOP:
    # Disable on production, this is for the browseable API only
    REST_FRAMEWORK['DEFAULT_AUTHENTICATION_CLASSES'] += ('rest_framework.authentication.SessionAuthentication',)

if PRODUCTION:
    # Enabled on production? This allows locking write permissions on views
    # to users that request tokens with write scope
    REST_FRAMEWORK['DEFAULT_PERMISSION_CLASSES'] += ('oauth2_provider.ext.rest_framework.TokenHasReadWriteScope',)
